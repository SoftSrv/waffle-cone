jobs:

  - name: provision
    type: runSh
    steps:
      - IN: waffle_cone_repo
        switch: off
      - IN: softsrv_pem
      - IN: terraform_params
      - IN: softsrv_aws_creds
      - IN: pack
        switch: off
      - IN: tfState
        switch: off
      - TASK:
        - script: IN_STATE=/build/IN/tfState/state
        - script: if [ -f $IN_STATE/terraform.tfstate ]; then cp $IN_STATE/terraform.tfstate $WAFFLE_CONE_REPO_STATE/ ; fi
        - script: cd $WAFFLE_CONE_REPO_STATE
        - script: export LATEST_AMI=$PACK_VERSIONNAME
        - script: shippable_replace terraform.tfvars
        - script: printenv | grep SOFTSRV
        - script: echo "KEYFILE PATH IS - $SOFTSRV_PEM_KEYFILE"
        - script: terraform $TFACTION
      - OUT: tfState
    always:
      - script: echo 'save state if we created it'
      - script: OUT_STATE=/build/OUT/tfState/state
      - script: cp $WAFFLE_CONE_REPO_STATE/terraform.tfstate $OUT_STATE
    on_success:
      - script: echo "versionName=$PUBLIC_IP" >> $JOB_STATE/$JOB_NAME.env

  - name: pack
    type: runSh
    steps:
      - IN: waffle_cone_repo
        switch: off
      - IN: softsrv_aws_creds
      - TASK:
        - script: cd $WAFFLE_CONE_REPO_STATE/packer
        - script: packer build ami-definition.json 2>&1 | tee $JOB_STATE/output.txt
        - script: export AMI=$(tail -n1 $JOB_STATE/output.txt | awk '{print $2}')
        - script: echo "versionName=$AMI" >> $JOB_STATE/$JOB_NAME.env
    on_failure:
      - script: cat $JOB_STATE/output.txt
    on_success:
      - script: 'successfully built AMI $AMI'
